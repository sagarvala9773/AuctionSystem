//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.TeamServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Team", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class Team : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int T_BValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string T_CaptainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string T_HCoachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string T_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string T_OwnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int T_BValue {
            get {
                return this.T_BValueField;
            }
            set {
                if ((this.T_BValueField.Equals(value) != true)) {
                    this.T_BValueField = value;
                    this.RaisePropertyChanged("T_BValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string T_Captain {
            get {
                return this.T_CaptainField;
            }
            set {
                if ((object.ReferenceEquals(this.T_CaptainField, value) != true)) {
                    this.T_CaptainField = value;
                    this.RaisePropertyChanged("T_Captain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string T_HCoach {
            get {
                return this.T_HCoachField;
            }
            set {
                if ((object.ReferenceEquals(this.T_HCoachField, value) != true)) {
                    this.T_HCoachField = value;
                    this.RaisePropertyChanged("T_HCoach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string T_Name {
            get {
                return this.T_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.T_NameField, value) != true)) {
                    this.T_NameField = value;
                    this.RaisePropertyChanged("T_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string T_Owner {
            get {
                return this.T_OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.T_OwnerField, value) != true)) {
                    this.T_OwnerField = value;
                    this.RaisePropertyChanged("T_Owner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/PlayerService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeamServiceReference.ITeamService")]
    public interface ITeamService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeam", ReplyAction="http://tempuri.org/ITeamService/GetTeamResponse")]
        System.Data.DataSet GetTeam();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeam", ReplyAction="http://tempuri.org/ITeamService/GetTeamResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTeamAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddTeam", ReplyAction="http://tempuri.org/ITeamService/AddTeamResponse")]
        string AddTeam(Client.TeamServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddTeam", ReplyAction="http://tempuri.org/ITeamService/AddTeamResponse")]
        System.Threading.Tasks.Task<string> AddTeamAsync(Client.TeamServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteTeam", ReplyAction="http://tempuri.org/ITeamService/DeleteTeamResponse")]
        string DeleteTeam(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteTeam", ReplyAction="http://tempuri.org/ITeamService/DeleteTeamResponse")]
        System.Threading.Tasks.Task<string> DeleteTeamAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateTeam", ReplyAction="http://tempuri.org/ITeamService/UpdateTeamResponse")]
        string UpdateTeam(Client.TeamServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateTeam", ReplyAction="http://tempuri.org/ITeamService/UpdateTeamResponse")]
        System.Threading.Tasks.Task<string> UpdateTeamAsync(Client.TeamServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ITeamService/GetDataUsingDataContractResponse")]
        Client.TeamServiceReference.CompositeType GetDataUsingDataContract(Client.TeamServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ITeamService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.TeamServiceReference.CompositeType> GetDataUsingDataContractAsync(Client.TeamServiceReference.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeamServiceChannel : Client.TeamServiceReference.ITeamService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TeamServiceClient : System.ServiceModel.ClientBase<Client.TeamServiceReference.ITeamService>, Client.TeamServiceReference.ITeamService {
        
        public TeamServiceClient() {
        }
        
        public TeamServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TeamServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeamServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetTeam() {
            return base.Channel.GetTeam();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTeamAsync() {
            return base.Channel.GetTeamAsync();
        }
        
        public string AddTeam(Client.TeamServiceReference.Team team) {
            return base.Channel.AddTeam(team);
        }
        
        public System.Threading.Tasks.Task<string> AddTeamAsync(Client.TeamServiceReference.Team team) {
            return base.Channel.AddTeamAsync(team);
        }
        
        public string DeleteTeam(int id) {
            return base.Channel.DeleteTeam(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTeamAsync(int id) {
            return base.Channel.DeleteTeamAsync(id);
        }
        
        public string UpdateTeam(Client.TeamServiceReference.Team team) {
            return base.Channel.UpdateTeam(team);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTeamAsync(Client.TeamServiceReference.Team team) {
            return base.Channel.UpdateTeamAsync(team);
        }
        
        public Client.TeamServiceReference.CompositeType GetDataUsingDataContract(Client.TeamServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.TeamServiceReference.CompositeType> GetDataUsingDataContractAsync(Client.TeamServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
